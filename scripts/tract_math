#!/usr/bin/env python
import sys
import itertools
from argparse import ArgumentParser, FileType, REMAINDER

import warnings

def custom_formatwarning(msg, *a):
    # ignore everything except the message
    return '\nWarning: ' + str(msg) + '\n'

warnings.formatwarning = custom_formatwarning


def tract_math_operation(help_text, needs_one_tract=True):
    '''
    Decorator to identify tract_math functionalities the name of the
    function will be automatically incorporated to the tract_math options

    Parameters
    ----------
    help_text: help for the operation
    needs_one_tract: tells the script if all the input tractographies should
                      be unified as one or left as a tractography list
    '''
    def internal_decorator(func):
        func.help_text = help_text
        func.needs_one_tract = needs_one_tract
        return func
    return internal_decorator


def main():
    from tract_querier.tract_math import operations
    from tract_querier.tract_math import TractMathWrongArgumentsError

    usage = r"""
    usage: %(prog)s <tract1.vtk> ... <tractN.vtk> operation <operation parameter1> ... <operation parameterN> <output_tract.vtk> \
                      [ optional flags ]

    optional flags:  Always start with "--" and are considered as boolean flags
        --useFileNamesAsIndex  (when creating table outputs, use input file names instead of index id)
    Available operations:
    """

    operations_names = operations.keys()
    operations_names.sort()
    for f in operations_names:
        usage += '\t%s %s\n' % (f, operations[f].help_text)

    #The first arguments, except for the last one, might be tractography files

    n_tracts = len([
        tract for tract in
        itertools.takewhile(
            lambda x: x not in operations_names,
            sys.argv[1:]
        )
    ])

    parser = ArgumentParser(usage=usage)
    parser.add_argument('tractographies', nargs=max(n_tracts, 1), help='tractography files', type=FileType('r'))
    parser.add_argument('operation', type=str, choices=operations_names,
                        help="operation to use")
    parser.add_argument('operation_parameters', type=str, nargs=REMAINDER,
                        help="operation parameters")

    args = parser.parse_args()
    #Load the global modules after the parsing of parameters
    from tract_querier.tractography import tractography_from_files

    if  (args.operation in operations) and operations[args.operation].needs_one_tract:
        tractography = tractography_from_files([f.name for f in args.tractographies])
    else:
        tractography = []
        try:
            for f in args.tractographies:
                # For each tractography file, pass a tuple of (tractography filename, tractography instance) to tractography list.
                tractography.append((f.name,tractography_from_files(f.name)))
        except IOError as e:
            print >>sys.stderr, "Error reading file ", f.name, "(%s)" % repr(e)

    if  args.operation in operations:
        try:
            operations[args.operation](tractography, *args.operation_parameters)
        except TractMathWrongArgumentsError, e:
            parser.error('\n\n' + str(e))
        except TypeError:
            parser.error("\n\nError: Wrong number of parameters for the operation")
    else:
        parser.error("\n\nOperation not found")


if __name__ == "__main__":
    main()
    sys.exit()
